@page "/repositories"
@using Ecr.Browser
@inject EcrClient EcrClient

<MudContainer>
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h4">Repositories</MudText>
        </MudItem>
        <MudItem xs="12">
            <MudTable Items="repositories" Hover="true" Bordered="true">
                <HeaderContent>
                    <MudTh>Repository Name</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Repository Name">@context</MudTd>
                    <MudTd DataLabel="Actions">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => ToggleRepository(@context)">
                            @if (expandedRepositories.Contains(@context))
                            {
                                <MudIcon Icon="icons:expand_less" />
                            }
                            else
                            {
                                <MudIcon Icon="icons:expand_more" />
                            }
                        </MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudItem>
        @foreach (var repository in expandedRepositories)
        {
            <MudItem xs="12">
                <MudCollapse Expanded="true">
                    <MudText Typo="Typo.h5">@repository</MudText>
                    <MudTable Items="GetImages(repository)" Hover="true" Bordered="true">
                        <HeaderContent>
                            <MudTh>Image Digest</MudTh>
                            <MudTh>Tags</MudTh>
                            <MudTh>Pushed At</MudTh>
                            <MudTh>Pulled At</MudTh>
                            <MudTh>Select</MudTh>
                            <MudTh>Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Image Digest">@context.ImageDigest</MudTd>
                            <MudTd DataLabel="Tags">@string.Join(", ", @context.ImageTags)</MudTd>
                            <MudTd DataLabel="Pushed At">@context.ImagePushedAt?.ToString("g")</MudTd>
                            <MudTd DataLabel="Pulled At">@context.ImagePulledAt?.ToString("g")</MudTd>
                            <MudTd DataLabel="Select">
                                <MudCheckBox @bind-Checked="selectedImages.Contains(@context)" OnChange="(checked) => ToggleImageSelection(@context, checked)" />
                            </MudTd>
                            <MudTd DataLabel="Actions">
                                <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="() => DeleteImage(@context)">
                                    <MudIcon Icon="icons:delete" />
                                </MudButton>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudCollapse>
            </MudItem>
        }
        <MudItem xs="12">
            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="DeleteSelectedImages">
                Delete Selected Images
            </MudButton>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private List<string> repositories = new();
    private HashSet<string> expandedRepositories = new();
    private HashSet<ImageDetailsDto> selectedImages = new();

    protected override async Task OnInitializedAsync()
    {
        await foreach (var repository in EcrClient.ListRepositoriesAsync())
        {
            repositories.Add(repository);
        }
    }

    private void ToggleRepository(string repository)
    {
        if (expandedRepositories.Contains(repository))
        {
            expandedRepositories.Remove(repository);
        }
        else
        {
            expandedRepositories.Add(repository);
        }
    }

    private async Task<IEnumerable<ImageDetailsDto>> GetImages(string repository)
    {
        var images = new List<ImageDetailsDto>();
        await foreach (var image in EcrClient.ListImagesAsync(repository))
        {
            images.Add(image);
        }
        return images;
    }

    private void ToggleImageSelection(ImageDetailsDto image, bool isSelected)
    {
        if (isSelected)
        {
            selectedImages.Add(image);
        }
        else
        {
            selectedImages.Remove(image);
        }
    }

    private void DeleteImage(ImageDetailsDto image)
    {
        // Implement the logic to delete a single image
    }

    private void DeleteSelectedImages()
    {
        // Implement the logic to delete all selected images
    }
}
